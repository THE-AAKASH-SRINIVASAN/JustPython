all the codes are done without class few may be - but the matter is 
it is important to learn along with driver code


Day 1 - Second Largest Element
ARRAYS

//
Given an array of positive integers arr[], return the second largest element from the array. If the second largest element doesn't exist then return -1.
Note: The second largest element should not be equal to the largest element.

Examples:
Input: arr[] = [12, 35, 1, 10, 34, 1]
Output: 34
Explanation: The largest element of the array is 35 and the second largest element is 34.
Input: arr[] = [10, 5, 10]
Output: 5
Explanation: The largest element of the array is 10 and the second largest element is 5.
Input: arr[] = [10, 10, 10]
Output: -1
Explanation: The largest element of the array is 10 and the second largest element does not exist.
//

class Solution:
    def getSecondLargest(self, arr):
        # Code Here
        n=len(arr)
        if n<2:
            return -1
        first=second=float('-inf')    
        for num in arr:
             if num > first:
            second=first
            first=num
        else if second=num and first != num:
            second=num   
    if second==float('-inf'):
         return -1
    else:
         return second
            
DAY 2 - Move All Zeros To End
ARRAYS

//You are given an array arr[] of non-negative integers. 
Your task is to move all the zeros in the array to the right end while maintaining 
the relative order of the non-zero elements. The operation must be performed in place, 
meaning you should not use extra space for another array.

Examples:
Input: arr[] = [1, 2, 0, 4, 3, 0, 5, 0]
Output: [1, 2, 4, 3, 5, 0, 0, 0]
Explanation: There are three 0s that are moved to the end.
Input: arr[] = [10, 20, 30]
Output: [10, 20, 30]
Explanation: No change in array as there are no 0s.
Input: arr[] = [0, 0]
Output: [0, 0]
Explanation: No change in array as there are all 0s.//


class Solution:
	def pushZerosToEnd(self,arr):
    	# code here
    	count=0
    	for i in range(len(arr)):
    	    if arr[i]!=0:
    	        arr[i],arr[count]=arr[count],arr[i]
    	        count+=1

if __name__=="__main__":
  arr=[1,2,0,4,3,0,5,0]
  pushZerosToEnd(arr)
  for num in arr():
     print(num,end=" ") 




DAY - 3

//
REVERSE AN ARRAY
//

def reverseArray(arr):
    left,right=0, len(arr)-1
    while left<right:
        arr[left],arr[right]=arr[right],arr[left]
        left+=1
        right-=1
    return arr
arr=[1,2,3,4,5,6]
reverseArray(arr)
print("Reversed Array:")
for i in range(len(arr)):
    print(arr[i],end=" ")




DAY - 4

//
Rotate an array
//

1st approch - Juggling algorithm




2nd approch - reversal alogorithm

def rotate(arr,d):
    n=len(arr)
    d%=n
    
    reverse(arr,0,d-1)
    reverse(arr,d,n-1)
    reverse(arr,0,n-1)
    
def reverse(arr,start,end):
    while start<end:
        arr[start],arr[end]=arr[end],arr[start]
        start+=1
        end-=1
        
arr=[1,2,3,4,5,6]
rotate(arr,3)
print(arr)


//Permuatation



def permu(arr):
    n=len(arr)
    pivot=-1
    for i in range(n-2,-1,-1):
        if arr[i]<arr[i+1]:
            pivot=i
            break
    
    if pivot==-1:
        arr.reverse()
        return arr
    
    for i in range(n-1,pivot,-1):
        if arr[i]>arr[pivot]:
            arr[i],arr[pivot]=arr[pivot],arr[i]
            break
    
    left,right=pivot+1,n-1
    while left<right:
        arr[left],arr[right]=arr[right],arr[left]
        left+=1
        right-=1
    
    return arr
        
arr=[2,4,1,7,5,0]
print(permu(arr))
        

// Majority Element 2


def FindMajority(arr):
    n = len(arr)
    ele1, ele2 = -1, -1
    cnt1, cnt2 = 0, 0

    # Step 1: Find potential candidates for majority elements
    for ele in arr:
        if ele1 == ele:
            cnt1 += 1
        elif ele2 == ele:
            cnt2 += 1
        elif cnt1 == 0:
            ele1 = ele
            cnt1 = 1
        elif cnt2 == 0:
            ele2 = ele
            cnt2 = 1
        else:
            cnt1 -= 1
            cnt2 -= 1

    # Step 2: Validate candidates
    cnt1, cnt2 = 0, 0
    for ele in arr:
        if ele1 == ele:
            cnt1 += 1
        elif ele2 == ele:
            cnt2 += 1

    res = []
    if cnt1 > n // 3:
        res.append(ele1)
    if cnt2 > n // 3 and ele1 != ele2:
        res.append(ele2)

    # Ensure the result is sorted if needed
    if len(res) == 2 and res[0] > res[1]:
        res[0], res[1] = res[1], res[0]

    return res


if __name__ == "__main__":
    arr = [3, 2, 2, 3, 1, 2, 3, 4]
    print(FindMajority(arr))

    


//Height 


def heights(arr,k):
    arr.sort()
    n=len(arr)

    res =arr[n-1]-arr[0]
    
    for i in range(1,len(arr)):
        if arr[i]-k<0:
            continue
        minH=min(arr[0]+k,arr[i]-k)
        maxH=max(arr[i-1]+k,arr[n-1]-k)
        res=min(res,maxH-minH)
    return res
    
if __name__=="__main__":
    arr=[1,3,27,55,61,17,8]
    k=3
    output=heights(arr,k)
    print(output)
    


def maxSubArraySum(self, arr):
    if not arr:  # Handle empty array case
        return 0  
    
    res = arr[0]
    maxEnding = arr[0]

    for i in range(1, len(arr)):
        maxEnding = max(maxEnding + arr[i], arr[i])
        res = max(res, maxEnding)

    return res
