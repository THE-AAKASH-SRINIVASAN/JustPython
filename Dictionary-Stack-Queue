
1
//Fill in the misssing lines of code 
so that the program prints Carrot Vegetable as the output.//


itemtype={"Apple":"Fruit", "Car":"Vehicle","Sivakarthikeyan":"Actor"}
itemtype.clear()
itemtype["Carrot"]="Vegetable"
for key in itemtype.keys():
   print(key + " " + itemtype[key])

2//
Fill in the misssing lines of code so that the program 
prints YES if the key Mobile is present in the
dictionary itembrand. Else the program prints NO as the output.
//

itembrand = {}
inputpairs = list(input().split(" "))
for index in range (0, len(inputpairs),2):
    itembrand[inputpairs[index]] = inputpairs[index+1]
if "mobile" in itembrand:
    print("YES")
else:
    print("NO")



3//
A list of items with their price is passed as the input. 
Fill in the missing lines of code so that the program accepts the input and 
store them in a dictionary called itemprice where the order of input is 
preserved while iterating the keys.


Example Input/Output:
Input:
PenDrive Rs.200 Mouse Rs.350 Keyboard Rs.450 Harddisk Rs.2300
Output:
PenDrive Rs.200
Mouse Rs.350
Keyboard Rs.450
Harddisk Rs.2300
//

import collections
inputpairs = list(input().split(" "))
inputlist = []
for index in range (0, len(inputpairs),2):
 currpair=(inputpairs[index],inputpairs[index+1])
 inputlist.append(currpair)
itemprice = collections.OrderedDict(inputlist)
for key in itemprice.keys():
 print (key+" "+itemprice[key])


4//
Initialize the values for variables x,y and z so that 
the output of the program is 900 500 700//



x=500
y=700
z=900
stack = []
stack.append(y)
stack.append(z)
print (stack.pop(), end=" ")
stack.append(x)
print (stack.pop(), end=" ")
print (stack.pop(), end=" ")



5//
A list can be used as a queue, where the first element added is the first element retrieved (FIFO -
“first-in, first-out”). But lists are not efficient for this purpose as inserts or pops from the beginning
of a list is slow (because all of the other elements have to be shifted by one).
To implement a queue, use collections.deque which was designed to have fast appends and pops
from both ends.
from collections import deque
queue = deque([10,20,30,40])
print (queue.popleft(), end=" ")
queue.append(50)
print (queue.popleft(), end=" ")
print (queue.pop(), end=" ")
The above program prints 10 20 50 as the output. The popleft() method returns the element in the
front while pop() method returns the most recently added element behaving like a stack
//


6//
Initialize the values for variables x,y and z so that the output of the program is 300 250 2222 150.
//

x=250
y=150
z=2222
from collections import deque 
queue = deque([300]) 
print (queue.popleft(), end=" ") 
queue.append(x) 
queue.append(y) 
queue.append(z) 
print (queue.popleft(), end=" ") 
print (queue.pop(), end=" ") 
print (queue.popleft(), end=" ")



7//
Initialize the values for variables 
x,y and z so that the output of the program is 4000 1500 2200
//


x=2200;y=1500;z=4000;
from collections import deque
queue=deque([])
queue.appendleft(x)
queue.appendleft(z)
queue.appendleft(y)
print(queue.popleft(),end=" ")
print(queue.popleft(),end=" ")
print(queue.popleft(),end=" ")



8//
Declare an empty set marks so that the output of the program is 100.
//

marks=set()
marks.add(40) 
marks.add(60) 
marks.add(40) 
marks.add(60) 
total = 0 
for m in marks: 
  total+=m print (total)

9//
Initialize variables a,b,x,y so that the program prints 50 as the output.
//

x=10
y=1
a=5
b=2
numberpairs = {}
numberpairs[y] = x
numberpairs[b] = a
product = 1
for key,val in numberpairs.items():
    product*=val
print (product)


10//
THE OUTPUT SHOULD BE PRINTED AS 
Apple
NOTPRESENT
NOTPRESENT
Eagle 
//


letterword={}
defaultvalue="NOTPRESENT"
letterword = {"A":"Apple", "E":"Eagle", "S":"Snake"}
print (letterword.get("A",defaultvalue))   
print (letterword.get("B",defaultvalue))  
print (letterword.get("R",defaultvalue))   
print (letterword.get("E",defaultvalue))
